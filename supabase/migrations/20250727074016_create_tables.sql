
-- API プロバイダーテーブル
create table public.api_providers (
  id   integer generated by default as identity primary key, -- AUTO INCREMENT
  name text    not null unique                           -- 表示名
);

alter table public.api_providers enable row level security;

create policy "read_all_users"
  on public.api_providers
  for select
  to authenticated
  using (true);

-- ユーザーの API キー設定を保存するテーブル
create table public.api_key_settings (
  user_id     uuid primary key references auth.users(id) on delete cascade,
  api_provider integer default null references public.api_providers(id) on delete set null, -- API プロバイダーID
  created_at  timestamptz not null default now(),
  updated_at  timestamptz not null default now()
);

alter table public.api_key_settings enable row level security;

-- 読み
create policy "setting_read_own"
  on public.api_key_settings
  for select
  to authenticated
  using ( (select auth.uid()) = user_id );

-- 書き
create policy "setting_write_own"
  on public.api_key_settings
  for insert
  to authenticated
  with check ( (select auth.uid()) = user_id );

-- 更新
create policy "setting_update_own"
  on public.api_key_settings
  for update
  to authenticated
  using ( (select auth.uid()) = user_id )
  with check ( (select auth.uid()) = user_id );


-- チャットスレッドテーブル
create table public.conversations (
  id             uuid primary key default gen_random_uuid(),
  user_id        uuid not null references auth.users(id) on delete cascade,
  title          text,
  model          text,
  created_at     timestamptz not null default now(),
  updated_at     timestamptz not null default now(),
  archived_at    timestamptz,
  deleted_at     timestamptz
);

create index if not exists conversations_user_active_idx
  on public.conversations(user_id, updated_at desc)
  where deleted_at is null;

alter table public.conversations enable row level security;

-- 読み
create policy "conv_select_own"
  on public.conversations
  for select
  to authenticated
  using ((select auth.uid()) = user_id and deleted_at is null);

-- 書き
create policy "conv_insert_own"
  on public.conversations
  for insert
  to authenticated
  with check ((select auth.uid()) = user_id);

-- 更新
create policy "conv_update_own"
  on public.conversations
  for update
  to authenticated
  using ((select auth.uid()) = user_id)
  with check ((select auth.uid()) = user_id);


-- messages: ロールと階層（reply_to）を持てる。ContentはJSONBで拡張。
create type message_role as enum ('system','user','assistant','tool');

create table public.messages (
  id             uuid primary key default gen_random_uuid(),
  conversation_id uuid not null references public.conversations(id) on delete cascade,
  user_id        uuid not null references auth.users(id) on delete cascade,
  role           message_role not null,
  content        jsonb not null,
  reply_to       uuid references public.messages(id) on delete set null,
  created_at     timestamptz not null default now(),
  updated_at     timestamptz not null default now(),
  deleted_at     timestamptz
);

create index if not exists messages_conv_created_active_idx
  on public.messages(conversation_id, created_at)
  where deleted_at is null;

create index if not exists messages_user_idx on public.messages(user_id);

create unique index if not exists messages_id_conv_unique on public.messages(id, conversation_id);

alter table public.messages enable row level security;

-- 読み
create policy "msg_select_in_own_conv"
  on public.messages
  for select
  to authenticated
  using (
    exists (select 1 from conversations c
            where c.id = conversation_id and c.user_id = (select auth.uid()) and c.deleted_at is null)
    and deleted_at is null
  );

-- 書き
create policy "msg_insert_in_own_conv"
  on public.messages
  for insert
  to authenticated
  with check (
    user_id = (select auth.uid())
    and exists (select 1 from conversations c where c.id = conversation_id and c.user_id = (select auth.uid()))
  );

-- 更新
-- create policy "msg_update_in_own_conv"
--   on public.messages
--   for update
--   to authenticated
--   using (
--     exists (select 1 from conversations c where c.id = conversation_id and c.user_id = (select auth.uid()) and c.deleted_at is null)
--     and deleted_at is null
--   ) with check (
--     exists (select 1 from conversations c where c.id = conversation_id and c.user_id = (select auth.uid()) and c.deleted_at is null)
--   );


-- 集計テーブル
create table public.token_usage (
  id             bigserial primary key,
  user_id        uuid not null references auth.users(id) on delete cascade,
  conversation_id uuid ,
  message_id     uuid ,
  model          text not null,
  prompt_tokens  int not null default 0,
  completion_tokens int not null default 0,
  cost_cents     numeric(12,4) not null default 0,  -- 単価設定で算出
  created_at     timestamptz not null default now()
);

create index if not exists token_usage_user_created_idx
  on public.token_usage(user_id, created_at desc);

alter table public.token_usage
  add constraint token_usage_message_fk
  foreign key (message_id, conversation_id)
  references public.messages(id, conversation_id)
  on delete cascade;

alter table public.token_usage enable row level security;

-- 読み
create policy "usage_select_own"
  on public.token_usage
  for select
  to authenticated
  using (user_id = (select auth.uid()));

-- 書き
create policy "usage_insert_own"
  on public.token_usage
  for insert
  to authenticated
  with check (user_id = (select auth.uid()));


-- 会話要約テーブル
create table public.conversation_summaries (
  conversation_id uuid primary key ,
  user_id        uuid not null references auth.users(id) on delete cascade,
  summary text not null,
  up_to_message_id uuid not null ,
  updated_at timestamptz not null default now()
);

create index if not exists conversation_summaries_user_updated_idx
  on conversation_summaries(user_id, updated_at desc);

alter table public.conversation_summaries
  add constraint conversation_summaries_up_to_message_fk
  foreign key (up_to_message_id, conversation_id)
  references public.messages(id, conversation_id)
  on delete cascade;

alter table public.conversation_summaries enable row level security;

-- 読み
create policy "conv_summary_select_own"
  on public.conversation_summaries
  for select
  to authenticated
  using (
    exists (select 1 from conversations c
            where c.id = conversation_id and c.user_id = (select auth.uid()) and c.deleted_at is null)
    and user_id = (select auth.uid())
  );

-- 書き
create policy "conv_summary_insert_own"
  on public.conversation_summaries
  for insert
  to authenticated
  with check (
    user_id = (select auth.uid())
    and exists (select 1 from conversations c where c.id = conversation_id and c.user_id = (select auth.uid()) and c.deleted_at is null)
  );

-- 更新
create policy "conv_summary_update_own"
  on public.conversation_summaries
  for update
  to authenticated
  using (
    exists (select 1 from conversations c where c.id = conversation_id and c.user_id = (select auth.uid()) and c.deleted_at is null)
  ) with check (
    exists (select 1 from conversations c where c.id = conversation_id and c.user_id = (select auth.uid()) and c.deleted_at is null)
  );

-- 変更トリガ
create or replace function set_updated_at()
returns trigger
set search_path = ''
as $$
begin
  new.updated_at = now();
  return new;
end; $$ language plpgsql;

create trigger trg_api_key_settings_updated
before update on public.api_key_settings
for each row execute function set_updated_at();

create trigger trg_conversations_updated
before update on public.conversations
for each row execute function set_updated_at();

create trigger trg_messages_updated
before update on public.messages
for each row execute function set_updated_at();

create trigger trg_conv_sum_updated
before update on public.conversation_summaries
for each row execute function set_updated_at();

create trigger trg_token_usage_updated
before update on public.token_usage
for each row execute function set_updated_at();
